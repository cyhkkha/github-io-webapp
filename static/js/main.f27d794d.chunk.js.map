{"version":3,"sources":["components/layout/Navbar.js","components/guitar/guitarUtils.js","components/guitar/fret-train.js","components/guitar/note-train.js","components/guitar/tablature-train.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","state","page","handleClick","e","_this","setState","key","console","log","handleSearch","value","this","react_default","a","createElement","className","href","menu_default","onClick","mode","selectedKeys","Item","React","Component","sound","forEach","i","next","pre","length","equalOf","o","alias","indexOf","level","is","Object","keys","guitarString","map","name","find","scale","FretTrain","props","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","string","fret","checked","sFrom","sTo","fFrom","fTo","answer","stringType","handleRedo","_this$state","Math","floor","random","handleCheck","_this$state2","correct","style","color","fScope","toConsumableArray","Array","fill","select_default","Option","f","t","isFrom","_this2","_this$state3","sScope","card_default","tabs_default","defaultActiveKey","TabPane","tab","input_default","placeholder","onChange","target","trim","button_default","type","htmlType","icon","height","fixFret","fixString","NoteTrain","ps","fretAnswer","Number","fretOption","TablatureTrain","frets","disabled","answers","checks","handelAnswerChange","index","s","concat","_ref","width","textAlign","App","Navbar_Navbar","fret_train_FretTrain","note_train_NoteTrain","tablature_train_TablatureTrain","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f27d794d.chunk.js","sourcesContent":["import React from 'react';\r\nimport Menu from 'antd/lib/menu';\r\n// import Input from 'antd/lib/input';\r\nimport './Navbar.css';\r\n\r\nexport default class Navbar extends React.Component {\r\n    state = {\r\n        page: 'guitar',\r\n    }\r\n\r\n    handleClick = (e) => {\r\n        this.setState({\r\n            page: e.key,\r\n        });\r\n        console.log('menu change to ', e.key);\r\n    };\r\n\r\n    handleSearch = (value) => {\r\n        console.log('search for ', value);\r\n    }\r\n\r\n    render() {\r\n        const { page } = this.state;\r\n        return (\r\n            <header className=\"nav flex-between\">\r\n                <div className=\"ds-ib\">\r\n                    <a href=\"./#\">\r\n                        <h1 className=\"nav-title ds-ib\">Feinimouse</h1>\r\n                    </a>\r\n                    {/* <Input.Search\r\n                        placeholder=\"搜索\"\r\n                        onSearch={this.handleSearch}\r\n                        className=\"nav-search\"\r\n                    /> */}\r\n                </div>\r\n                <nav className=\"ds-ib\">\r\n                    <Menu\r\n                        onClick={this.handleClick}\r\n                        mode=\"horizontal\"\r\n                        selectedKeys={[page]}\r\n                    >\r\n                        <Menu.Item key=\"guitar\">吉他工具</Menu.Item>\r\n                        <Menu.Item key=\"blog\">博客</Menu.Item>\r\n                        <Menu.Item key=\"coin\">feinicoin</Menu.Item>\r\n                    </Menu>\r\n                </nav>\r\n            </header>\r\n        );\r\n    }\r\n}\r\n","import sound from './sound.json';\r\nimport guitarString from './guitarString.json';\r\nimport scale from './scale.json';\r\n\r\nsound.forEach((e, i) => {\r\n    e.next = sound[i + 1] || sound[0];\r\n    e.pre = sound[i - 1] || sound[sound.length - 1];\r\n    /** @namespace e.alias */\r\n    e.equalOf = o => e.alias.indexOf(o.level) >= 0;\r\n    e.is = o => e.alias.indexOf(o) >= 0;\r\n});\r\n\r\n/** @namespace guitarString.keys */\r\nObject.keys(guitarString).forEach((key) => {\r\n    guitarString[key] = guitarString[key]\r\n        .map(name => sound\r\n            .find(e => e.is(name)));\r\n});\r\n\r\nObject.keys(scale).forEach((key) => {\r\n    scale[key] = scale[key]\r\n        .map(name => sound\r\n            .find(e => e.is(name)));\r\n});\r\n\r\nexport {\r\n    sound,\r\n    guitarString,\r\n    scale,\r\n};\r\n","import React from 'react';\r\nimport Card from 'antd/lib/card';\r\nimport Input from 'antd/lib/input';\r\nimport Button from 'antd/lib/button';\r\nimport Tabs from 'antd/lib/tabs';\r\nimport Select from 'antd/lib/select';\r\nimport { guitarString } from './guitarUtils';\r\n\r\nexport default class FretTrain extends React.Component {\r\n    state = {\r\n        string: 1,\r\n        fret: 0,\r\n        checked: null,\r\n        sFrom: 1,\r\n        sTo: 6,\r\n        fFrom: 0,\r\n        fTo: 12,\r\n        answer: '',\r\n        stringType: 'standard',\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.fScope = [...Array(25)\r\n            .fill('').keys()]\r\n            .map(o => <Select.Option key={o} value={o}>{o}</Select.Option>);\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.handleRedo();\r\n    }\r\n\r\n    handleRedo = () => {\r\n        const { sFrom, sTo, fFrom, fTo } = this.state;\r\n        const fret = Math.floor(Math.random() * (fTo - fFrom + 1) + fFrom);\r\n        const string = Math.floor(Math.random() * (sTo - sFrom + 1) + sFrom);\r\n        this.setState({\r\n            fret,\r\n            string,\r\n            checked: null,\r\n            answer: '',\r\n        });\r\n    };\r\n\r\n    handleCheck = () => {\r\n        const { answer, stringType, string, fret } = this.state;\r\n        let correct = guitarString[stringType][string - 1];\r\n        for (let i = 0; i < fret; i += 1) {\r\n            correct = correct.next;\r\n        }\r\n        const checked = correct.is(answer)\r\n            ? <span style={{ color: 'green' }}>回答正确</span>\r\n            : <span style={{ color: 'red' }}>回答错误，正确答案是{correct.name}或{correct.level}</span>;\r\n        this.setState({ checked });\r\n    };\r\n\r\n    fixFret(f, t, isFrom) {\r\n        let fFrom = f;\r\n        let fTo = t;\r\n        if (fFrom > fTo) {\r\n            if (isFrom) {\r\n                fTo = fFrom;\r\n            } else {\r\n                fFrom = fTo;\r\n            }\r\n        }\r\n        this.setState({\r\n            fFrom,\r\n            fTo,\r\n        });\r\n    }\r\n\r\n    fixString(f, t, isFrom) {\r\n        let sFrom = f;\r\n        let sTo = t;\r\n        if (sFrom > sTo) {\r\n            if (isFrom) {\r\n                sTo = sFrom;\r\n            } else {\r\n                sFrom = sTo;\r\n            }\r\n        }\r\n        this.setState({\r\n            sFrom,\r\n            sTo,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { fFrom, fTo, sFrom, sTo, fret, string, checked, stringType, answer } = this.state;\r\n        const sScope = guitarString[stringType]\r\n            .map((e, i) => <Select.Option value={i + 1} key={e.name}>{i + 1}</Select.Option>);\r\n        return (\r\n            <Card className=\"guitar-card-size\">\r\n                <Tabs defaultActiveKey=\"play\">\r\n                    <Tabs.TabPane tab=\"指板练习\" key=\"play\">\r\n                        <p>根据提示，写出对应位置的音名</p>\r\n                        <p>\r\n                            <span><strong>弦数：</strong>{string}</span>\r\n                        </p>\r\n                        <p><strong>品数：</strong>{fret}</p>\r\n                        <div>\r\n                            <Input\r\n                                value={answer}\r\n                                placeholder=\"请输入正确的音符\"\r\n                                className=\"guitar-ele-l\"\r\n                                onChange={(e) => { this.setState({ answer: e.target.value.trim() }); }}\r\n                            />\r\n                            <Button\r\n                                type=\"primary\"\r\n                                className=\"ml-ss\"\r\n                                onClick={this.handleCheck}\r\n                                htmlType=\"button\"\r\n                            >验证</Button>\r\n                            <Button\r\n                                type=\"circle\"\r\n                                className=\"ml-ss\"\r\n                                icon=\"redo\"\r\n                                onClick={this.handleRedo}\r\n                                htmlType=\"button\"\r\n                            />\r\n                            <div style={{ height: '2em' }}>{checked}</div>\r\n                        </div>\r\n                    </Tabs.TabPane>\r\n                    <Tabs.TabPane tab=\"设置\" key=\"setting\">\r\n                        <div className=\"mb-s\">\r\n                            <strong>调弦方式：</strong>\r\n                            <Select\r\n                                value={stringType}\r\n                                className=\"guitar-ele-m\"\r\n                                onChange={(value) => { this.setState({ stringType: value }); }}\r\n                            >\r\n                                {Object.keys(guitarString)\r\n                                    .map(name => <Select.Option key={name} value={name}>{name}</Select.Option>)}\r\n                            </Select>\r\n                        </div>\r\n                        <p><strong>品格范围：</strong></p>\r\n                        <div className=\"mb-s\">\r\n                            <span>从：</span>\r\n                            <Select\r\n                                value={fFrom}\r\n                                className=\"guitar-ele-s\"\r\n                                onChange={(value) => { this.fixFret(value, fTo, true); }}\r\n                            >\r\n                                {this.fScope}\r\n                            </Select>\r\n                            <span className=\"ml-ss\">到：</span>\r\n                            <Select\r\n                                value={fTo}\r\n                                className=\"guitar-ele-s\"\r\n                                onChange={(value) => { this.fixFret(fFrom, value, false); }}\r\n                            >\r\n                                {this.fScope}\r\n                            </Select>\r\n                            <span className=\"ml-ss\">品</span>\r\n                        </div>\r\n                        <p><strong>弦范围：</strong></p>\r\n                        <div className=\"mb-s\">\r\n                            <span>从：</span>\r\n                            <Select\r\n                                value={sFrom}\r\n                                className=\"guitar-ele-s\"\r\n                                onChange={(value) => { this.fixString(value, sTo, true); }}\r\n                            >\r\n                                {sScope}\r\n                            </Select>\r\n                            <span className=\"ml-ss\">到：</span>\r\n                            <Select\r\n                                value={sTo}\r\n                                className=\"guitar-ele-s\"\r\n                                onChange={(value) => { this.fixString(sFrom, value, false); }}\r\n                            >\r\n                                {sScope}\r\n                            </Select>\r\n                            <span className=\"ml-ss\">弦</span>\r\n                        </div>\r\n                    </Tabs.TabPane>\r\n                </Tabs>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Card from 'antd/lib/card';\r\nimport Input from 'antd/lib/input';\r\nimport Button from 'antd/lib/button';\r\nimport Tabs from 'antd/lib/tabs';\r\nimport Select from 'antd/lib/select';\r\nimport { guitarString } from './guitarUtils';\r\n\r\nexport default class NoteTrain extends React.Component {\r\n    constructor(ps) {\r\n        super(ps);\r\n        this.fretOption = [...Array(25)\r\n            .fill('').keys()]\r\n            .map(o => <Select.Option key={o} value={o}>{o}</Select.Option>);\r\n    }\r\n\r\n    state = {\r\n        // 调弦规则\r\n        stringType: 'standard',\r\n        // 弦数\r\n        string: 6,\r\n        // 品数\r\n        fret: 0,\r\n        // 从xx品开始\r\n        fFrom: 0,\r\n        // 从xx品结束\r\n        fTo: 12,\r\n        // 玩家的回答\r\n        answer: '',\r\n        // 正确的音\r\n        sound: null,\r\n        // 点击检查后显示的内容\r\n        checked: null,\r\n    };\r\n\r\n    componentWillMount() {\r\n        this.handleRedo();\r\n    }\r\n\r\n    handleRedo = () => {\r\n        const { fFrom, fTo, string, stringType } = this.state;\r\n        const fret = Math.floor(Math.random() * (fTo - fFrom + 1) + fFrom);\r\n        let sound = guitarString[stringType][string - 1];\r\n        for (let i = 0; i < fret; i += 1) {\r\n            sound = sound.next;\r\n        }\r\n        this.setState({\r\n            fret,\r\n            sound,\r\n            checked: null,\r\n            answer: '',\r\n        });\r\n    };\r\n\r\n    handleCheck = () => {\r\n        const { fret, answer } = this.state;\r\n        const fretAnswer = Number(answer);\r\n        const checked = fretAnswer === fret || fretAnswer === fret + 12\r\n            ? <span style={{ color: 'green' }}>回答正确</span>\r\n            : <span style={{ color: 'red' }}>回答错误，正确答案是第{fret}品</span>;\r\n        this.setState({\r\n            checked,\r\n        });\r\n    };\r\n\r\n    fixFret(f, t, isFrom) {\r\n        let fFrom = f;\r\n        let fTo = t;\r\n        if (fFrom > fTo) {\r\n            if (isFrom) {\r\n                fTo = fFrom;\r\n            } else {\r\n                fFrom = fTo;\r\n            }\r\n        }\r\n        this.setState({\r\n            fFrom,\r\n            fTo,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { fFrom, fTo, string, checked, sound, stringType, answer } = this.state;\r\n        return (\r\n            <Card className=\"guitar-card-size\">\r\n                <Tabs defaultActiveKey=\"play\">\r\n                    <Tabs.TabPane tab=\"音符练习\" key=\"play\">\r\n                        <p>根据提示，写出对应位置的品格</p>\r\n                        <div className=\"mb-s\">\r\n                            <strong>弦数：</strong>\r\n                            <Select\r\n                                value={string}\r\n                                className=\"guitar-ele-m\"\r\n                                onChange={(value) => { this.setState({ string: value }); }}\r\n                            >\r\n                                {guitarString[stringType]\r\n                                    .map((e, i) => <Select.Option value={i + 1} key={e.name}>{i + 1}</Select.Option>)}\r\n                            </Select>\r\n                        </div>\r\n                        <p><strong>音名：</strong>{sound.name}</p>\r\n                        <div>\r\n                            <Input\r\n                                value={answer}\r\n                                placeholder=\"请输入正确的品数\"\r\n                                className=\"guitar-ele-l\"\r\n                                onChange={(e) => { this.setState({ answer: e.target.value.trim() }); }}\r\n                            />\r\n                            <Button\r\n                                type=\"primary\"\r\n                                className=\"ml-ss\"\r\n                                onClick={this.handleCheck}\r\n                                htmlType=\"button\"\r\n                            >验证</Button>\r\n                            <Button\r\n                                type=\"circle\"\r\n                                className=\"ml-ss\"\r\n                                icon=\"redo\"\r\n                                onClick={this.handleRedo}\r\n                                htmlType=\"button\"\r\n                            />\r\n                            <div style={{ height: '2em' }}>{checked}</div>\r\n                        </div>\r\n                    </Tabs.TabPane>\r\n                    <Tabs.TabPane tab=\"设置\" key=\"setting\">\r\n                        <div className=\"mb-s\">\r\n                            <strong>调弦方式：</strong>\r\n                            <Select\r\n                                value={stringType}\r\n                                className=\"guitar-ele-m\"\r\n                                onChange={(value) => { this.setState({ stringType: value, string: 1 }); }}\r\n                            >\r\n                                {Object.keys(guitarString)\r\n                                    .map(name => <Select.Option key={name} value={name}>{name}</Select.Option>)}\r\n                            </Select>\r\n                        </div>\r\n                        <p><strong>品格范围：</strong></p>\r\n                        <div className=\"mb-s\">\r\n                            <span>从：</span>\r\n                            <Select\r\n                                value={fFrom}\r\n                                className=\"guitar-ele-s\"\r\n                                onChange={(value) => { this.fixFret(value, fTo, true); }}\r\n                            >\r\n                                {this.fretOption}\r\n                            </Select>\r\n                            <span className=\"ml-ss\">到：</span>\r\n                            <Select\r\n                                value={fTo}\r\n                                className=\"guitar-ele-s\"\r\n                                onChange={(value) => { this.fixFret(fFrom, value, false); }}\r\n                            >\r\n                                {this.fretOption}\r\n                            </Select>\r\n                            <span className=\"ml-ss\">品</span>\r\n                        </div>\r\n                    </Tabs.TabPane>\r\n                </Tabs>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Card from 'antd/lib/card';\r\nimport Tabs from 'antd/lib/tabs';\r\nimport Input from 'antd/lib/input';\r\nimport Button from 'antd/lib/button';\r\nimport Select from 'antd/lib/select';\r\nimport { guitarString } from './guitarUtils';\r\n\r\nexport default class TablatureTrain extends React.Component {\r\n    state = {\r\n        stringType: 'standard',\r\n        frets: [{ fret: 0, disabled: false }],\r\n        answers: [''],\r\n        checks: [''],\r\n        sFrom: 1,\r\n        sTo: 6,\r\n        fFrom: 0,\r\n        fTo: 12,\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.fScope = [...Array(25)\r\n            .fill('').keys()]\r\n            .map(o => <Select.Option key={o} value={o}>{o}</Select.Option>);\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.handleRedo();\r\n    }\r\n\r\n    handelAnswerChange = (index, e) => {\r\n        const { answers } = this.state;\r\n        answers[index] = e.target.value.trim();\r\n        this.setState({ answers });\r\n    };\r\n\r\n    handleRedo = () => {\r\n        const { fFrom, fTo, sFrom, sTo, stringType } = this.state;\r\n        const frets = guitarString[stringType].map((e, i) => {\r\n            const o = { fret: 0, disabled: false };\r\n            if (i < sFrom - 1 || i > sTo - 1) {\r\n                o.disabled = true;\r\n                return o;\r\n            }\r\n            o.fret = Math.floor(Math.random() * (fTo - fFrom + 1) + fFrom);\r\n            return o;\r\n        });\r\n        this.setState({\r\n            frets,\r\n            answers: Array(guitarString[stringType].length).fill(''),\r\n            checks: Array(guitarString[stringType].length).fill(''),\r\n        });\r\n    };\r\n\r\n    handleCheck = () => {\r\n        const { stringType, frets, checks, answers } = this.state;\r\n        const fretSound = guitarString[stringType].map((s, index) => {\r\n            if (frets[index].disabled) {\r\n                return null;\r\n            }\r\n            let correct = s;\r\n            for (let i = 0; i < frets[index].fret; i += 1) {\r\n                correct = correct.next;\r\n            }\r\n            return correct;\r\n        });\r\n        fretSound.forEach((correct, index) => {\r\n            if (correct) {\r\n                checks[index] = correct.is(answers[index])\r\n                    ? <span className=\"ml-s\" style={{ color: 'green' }}>回答正确</span>\r\n                    : (\r\n                        <span className=\"ml-s\" style={{ color: 'red' }}>\r\n                            {`${correct.name}或${correct.level}`}\r\n                        </span>\r\n                    );\r\n            }\r\n        });\r\n        this.setState({ checks });\r\n    };\r\n\r\n    fixFret = (f, t, isFrom) => {\r\n        let fFrom = f;\r\n        let fTo = t;\r\n        if (fFrom > fTo) {\r\n            if (isFrom) {\r\n                fTo = fFrom;\r\n            } else {\r\n                fFrom = fTo;\r\n            }\r\n        }\r\n        this.setState({\r\n            fFrom,\r\n            fTo,\r\n        });\r\n    };\r\n\r\n    fixString = (f, t, isFrom) => {\r\n        let sFrom = f;\r\n        let sTo = t;\r\n        if (sFrom > sTo) {\r\n            if (isFrom) {\r\n                sTo = sFrom;\r\n            } else {\r\n                sFrom = sTo;\r\n            }\r\n        }\r\n        this.setState({\r\n            sFrom,\r\n            sTo,\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const { frets, checks, sFrom, sTo, fFrom, fTo, stringType, answers } = this.state;\r\n        const sScope = guitarString[stringType]\r\n            .map((e, i) => <Select.Option value={i + 1} key={e.name}>{i + 1}</Select.Option>);\r\n        return (\r\n            <Card className=\"guitar-card-size\">\r\n                <Tabs defaultActiveKey=\"play\">\r\n                    <Tabs.TabPane tab=\"识谱练习\" key=\"play\">\r\n                        <p>根据六线谱，写出对应位置的音符</p>\r\n                        <div className=\"mb-s\">\r\n                            {frets.map(({ fret, disabled }, index) => (\r\n                                <div key={index}>\r\n                                    <span>\r\n                                        ——\r\n                                        <strong\r\n                                            className=\"ds-ib\"\r\n                                            style={{ width: '2em', textAlign: 'center' }}\r\n                                        >{fret}</strong>\r\n                                        ——\r\n                                    </span>\r\n                                    <Input\r\n                                        value={answers[index]}\r\n                                        disabled={disabled}\r\n                                        placeholder=\"请输入音符\"\r\n                                        className=\"ml-s guitar-ele-m\"\r\n                                        onChange={e => this.handelAnswerChange(index, e)}\r\n                                    />\r\n                                    <span>{checks[index]}</span>\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                        <div>\r\n                            <Button\r\n                                type=\"primary\"\r\n                                className=\"ml-s\"\r\n                                onClick={this.handleCheck}\r\n                                htmlType=\"button\"\r\n                            >验证</Button>\r\n                            <Button\r\n                                type=\"circle\"\r\n                                className=\"ml-s\"\r\n                                icon=\"redo\"\r\n                                onClick={this.handleRedo}\r\n                                htmlType=\"button\"\r\n                            />\r\n                        </div>\r\n                    </Tabs.TabPane>\r\n                    <Tabs.TabPane tab=\"设置\" key=\"setting\">\r\n                        <div className=\"mb-s\">\r\n                            <strong>调弦方式：</strong>\r\n                            <Select\r\n                                value={stringType}\r\n                                className=\"guitar-ele-m\"\r\n                                onChange={(value) => { this.setState({ stringType: value }); }}\r\n                            >\r\n                                {Object.keys(guitarString)\r\n                                    .map(name => <Select.Option key={name} value={name}>{name}</Select.Option>)}\r\n                            </Select>\r\n                        </div>\r\n                        <p><strong>品格范围：</strong></p>\r\n                        <div className=\"mb-s\">\r\n                            <span>从：</span>\r\n                            <Select\r\n                                value={fFrom}\r\n                                className=\"guitar-ele-s\"\r\n                                onChange={(value) => { this.fixFret(value, fTo, true); }}\r\n                            >\r\n                                {this.fScope}\r\n                            </Select>\r\n                            <span className=\"ml-ss\">到：</span>\r\n                            <Select\r\n                                value={fTo}\r\n                                className=\"guitar-ele-s\"\r\n                                onChange={(value) => { this.fixFret(fFrom, value, false); }}\r\n                            >\r\n                                {this.fScope}\r\n                            </Select>\r\n                            <span className=\"ml-ss\">品</span>\r\n                        </div>\r\n                        <p><strong>弦范围：</strong></p>\r\n                        <div className=\"mb-s\">\r\n                            <span>从：</span>\r\n                            <Select\r\n                                value={sFrom}\r\n                                className=\"guitar-ele-s\"\r\n                                onChange={(value) => { this.fixString(value, sTo, true); }}\r\n                            >\r\n                                {sScope}\r\n                            </Select>\r\n                            <span className=\"ml-ss\">到：</span>\r\n                            <Select\r\n                                value={sTo}\r\n                                className=\"guitar-ele-s\"\r\n                                onChange={(value) => { this.fixString(sFrom, value, false); }}\r\n                            >\r\n                                {sScope}\r\n                            </Select>\r\n                            <span className=\"ml-ss\">弦</span>\r\n                        </div>\r\n                    </Tabs.TabPane>\r\n                </Tabs>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Navbar from './components/layout/Navbar';\r\nimport FretTrain from './components/guitar/fret-train';\r\nimport NoteTrain from './components/guitar/note-train';\r\nimport TablatureTrain from './components/guitar/tablature-train';\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"app\">\r\n                <Navbar />\r\n                <div className=\"app-container flex-start\">\r\n                    <FretTrain />\r\n                    <NoteTrain />\r\n                    <TablatureTrain />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\n/* eslint-disable */\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}